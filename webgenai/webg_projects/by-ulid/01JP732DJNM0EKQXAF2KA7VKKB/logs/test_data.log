INFO:response2code:Loading GPT response from system/genai/temp/response.json
INFO:response2code:Successfully wrote test data code to database/test_data/test_data_code.py
..  logic_logger: <Logger logic_logger (DEBUG)>
..  db_url: sqlite:////opt/projects/by-ulid/01JP732DJNM0EKQXAF2KA7VKKB/database/test_data/db.sqlite
..  cwd: /opt/projects/by-ulid/01JP732DJNM0EKQXAF2KA7VKKB
..  python_loc: /usr/local/bin/python
..  test_data_loader version: 1.1
config.py - security disabled
config.py - SQLALCHEMY_DATABASE_URI_AUTHENTICATION: sqlite:////opt/projects/by-ulid/01JP732DJNM0EKQXAF2KA7VKKB/database/authentication_db.sqlite

Loading rules from /opt/projects/by-ulid/01JP732DJNM0EKQXAF2KA7VKKB/logic/wg_rules
01JP732EZV7MB5EW8X45B6X8FE rule file: logic/wg_rules/Customer_Balance_Constraint.py
01JP732EZZX7J2XVS4R3TY2CEC rule file: logic/wg_rules/Customer_Balance_Derivation.py
01JP732F026PBW6EVEVYJ2AY4R rule file: logic/wg_rules/Order_Amount_Total_Derivation.py
01JP732F040HTGRKYKNWJ1ZRWG rule file: logic/wg_rules/Item_Amount_Derivation.py
01JP732F0813Q9W7QSP0D6JWYZ rule file: logic/wg_rules/Copy_Item_Unit_Price.py
01JP732F0AF6ECED61ENW0PT21 rule file: logic/wg_rules/Order_Kafka_Integration.py
01JP732F0D701XE32B8SJNE0JR rule file: logic/wg_rules/Customer_Name_Constraint.py
01JP732F0GBQ2A9KWHVX5AGQNK rule file: logic/wg_rules/Customer_Name_Constraint.py
[32mLoading Rule Module Customer_Balance_Constraint 01JP732EZV7MB5EW8X45B6X8FE [0m
kafka_connect imported
[32mLoading Rule Module Customer_Balance_Derivation 01JP732EZZX7J2XVS4R3TY2CEC [0m
[32mLoading Rule Module Order_Amount_Total_Derivation 01JP732F026PBW6EVEVYJ2AY4R [0m
[32mLoading Rule Module Item_Amount_Derivation 01JP732F040HTGRKYKNWJ1ZRWG [0m
[32mLoading Rule Module Copy_Item_Unit_Price 01JP732F0813Q9W7QSP0D6JWYZ [0m
[32mLoading Rule Module Order_Kafka_Integration 01JP732F0AF6ECED61ENW0PT21 [0m

The following rules have been loaded
Rule Bank[0xffffbb8f60f0] (loaded 2025-03-13 06:29:50.655630)
Mapped Class[Customer] rules:
  Constraint Function: None 
  Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function init_rule.<locals>.<lambda> at 0xffffb9499bc0>)
Mapped Class[Order] rules:
  Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)
  RowEvent Order.send_row_to_kafka() 
Mapped Class[Item] rules:
  Derive <class 'database.models.Item'>.amount as Formula (-1): Rule.formula(derive=Item.amount, as_expression=la [...]
  Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)

The following attributes have been referenced

..Customer.balance: constraint
..Customer.credit_limit: constraint
..Customer.balance: aggregate derivation
..Order.date_shipped: aggregate where clause
..Order.amount_total: sum derived from
..Order.amount_total: aggregate derivation
..Item.amount: sum derived from
..Item.quantity: - formula
..Item.unit_price: - formula
..Item.unit_price: parent copy derivation
..Product.unit_price: parent copy from

The following rules have been activated
Rule Bank[0xffffbb8f60f0] (loaded 2025-03-13 06:29:50.655630)
Mapped Class[Customer] rules:
  Constraint Function: None 
  Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function init_rule.<locals>.<lambda> at 0xffffb9499bc0>)
Mapped Class[Order] rules:
  Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)
  RowEvent Order.send_row_to_kafka() 
Mapped Class[Item] rules:
  Derive <class 'database.models.Item'>.amount as Formula (1): Rule.formula(derive=Item.amount, as_expression=la [...]
  Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)
Logic Bank 01.20.26 - 10 rules loaded
..  LogicBank activated

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Customer[None] {Insert - client} id: None, name: Alice, balance: 500.00, credit_limit: 1000.00  row: 0xffffb94502c0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Customer[None] {server aggregate_defaults: balance } id: None, name: Alice, balance: 0, credit_limit: 1000.00  row: 0xffffb94502c0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										

These Rules Fired (see Logic Phases, above, for actual order):		##

Logic Phase:		COMPLETE(session=0xffffbbf10470))       	
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Customer[None] {Insert - client} id: None, name: Bob, balance: 1200.00, credit_limit: 1500.00  row: 0xffffba072870  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Customer[None] {server aggregate_defaults: balance } id: None, name: Bob, balance: 0, credit_limit: 1500.00  row: 0xffffba072870  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										

These Rules Fired (see Logic Phases, above, for actual order):		##

Logic Phase:		COMPLETE(session=0xffffbbf10470))       	
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Customer[None] {Insert - client} id: None, name: Charlie, balance: 950.00, credit_limit: 950.00  row: 0xffffb9a0ed20  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Customer[None] {server aggregate_defaults: balance } id: None, name: Charlie, balance: 0, credit_limit: 950.00  row: 0xffffb9a0ed20  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										

These Rules Fired (see Logic Phases, above, for actual order):		##

Logic Phase:		COMPLETE(session=0xffffbbf10470))       	
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Customer[None] {Insert - client} id: None, name: Dana, balance: 300.00, credit_limit: 800.00  row: 0xffffb986fd70  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Customer[None] {server aggregate_defaults: balance } id: None, name: Dana, balance: 0, credit_limit: 800.00  row: 0xffffb986fd70  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										

These Rules Fired (see Logic Phases, above, for actual order):		##

Logic Phase:		COMPLETE(session=0xffffbbf10470))       	
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Order[None] {Insert - client} id: None, customer_id: 1, amount_total: 200, date_shipped: None, notes: Urgent  row: 0xffffb9466450  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Order[None] {server aggregate_defaults: amount_total } id: None, customer_id: 1, amount_total: 0, date_shipped: None, notes: Urgent  row: 0xffffb9466450  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										
..Order[1] {AfterFlush Event} id: 1, customer_id: 1, amount_total: 0, date_shipped: None, notes: Urgent  row: 0xffffb9466450  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Order[None] {Insert - client} id: None, customer_id: 2, amount_total: 300, date_shipped: 2023-07-15, notes: Express  row: 0xffffb9452cc0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Order[None] {server aggregate_defaults: amount_total } id: None, customer_id: 2, amount_total: 0, date_shipped: 2023-07-15, notes: Express  row: 0xffffb9452cc0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										
..Order[1] {AfterFlush Event} id: 1, customer_id: 2, amount_total: 0, date_shipped: 2023-07-15, notes: Express  row: 0xffffb9452cc0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Order[None] {Insert - client} id: None, customer_id: 3, amount_total: 150, date_shipped: None, notes: Regular  row: 0xffffb9466690  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Order[None] {server aggregate_defaults: amount_total } id: None, customer_id: 3, amount_total: 0, date_shipped: None, notes: Regular  row: 0xffffb9466690  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										
..Order[1] {AfterFlush Event} id: 1, customer_id: 3, amount_total: 0, date_shipped: None, notes: Regular  row: 0xffffb9466690  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Order[None] {Insert - client} id: None, customer_id: 4, amount_total: 250, date_shipped: 2023-07-10, notes: Overnight  row: 0xffffb94657c0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Order[None] {server aggregate_defaults: amount_total } id: None, customer_id: 4, amount_total: 0, date_shipped: 2023-07-10, notes: Overnight  row: 0xffffb94657c0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										
..Order[1] {AfterFlush Event} id: 1, customer_id: 4, amount_total: 0, date_shipped: 2023-07-10, notes: Overnight  row: 0xffffb94657c0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Item[None] {Insert - client} id: None, order_id: 1, product_id: 1, quantity: 10, unit_price: 10, amount: 100  row: 0xffffb94665d0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Item[None] {Missing Parent: order} id: None, order_id: 1, product_id: 1, quantity: 10, unit_price: 10, amount: 100  row: 0xffffb94665d0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Item[None] {Insert - client} id: None, order_id: 1, product_id: 2, quantity: 5, unit_price: 20, amount: 100  row: 0xffffb9466660  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Item[None] {Missing Parent: order} id: None, order_id: 1, product_id: 2, quantity: 5, unit_price: 20, amount: 100  row: 0xffffb9466660  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Item[None] {Insert - client} id: None, order_id: 2, product_id: 3, quantity: 2, unit_price: 150, amount: 300  row: 0xffffb94892e0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Item[None] {Missing Parent: order} id: None, order_id: 2, product_id: 3, quantity: 2, unit_price: 150, amount: 300  row: 0xffffb94892e0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Item[None] {Insert - client} id: None, order_id: 3, product_id: 4, quantity: 3, unit_price: 50, amount: 150  row: 0xffffb9466750  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Item[None] {Missing Parent: order} id: None, order_id: 3, product_id: 4, quantity: 3, unit_price: 50, amount: 150  row: 0xffffb9466750  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Order[None] {Insert - client} id: None, customer_id: 1, amount_total: 200, date_shipped: None, notes: Urgent  row: 0xffffb9466c00  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Order[None] {server aggregate_defaults: amount_total } id: None, customer_id: 1, amount_total: 0, date_shipped: None, notes: Urgent  row: 0xffffb9466c00  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										
..Order[1] {AfterFlush Event} id: 1, customer_id: 1, amount_total: 0, date_shipped: None, notes: Urgent  row: 0xffffb9466c00  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
/opt/projects/by-ulid/01JP732DJNM0EKQXAF2KA7VKKB/database/test_data/test_data_code.py:167: SAWarning: Session's state has been changed on a non-active transaction - this state will be discarded.
  session.rollback()
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Order[None] {Insert - client} id: None, customer_id: 2, amount_total: 300, date_shipped: 2023-07-15, notes: Express  row: 0xffffb9452cc0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Order[None] {server aggregate_defaults: amount_total } id: None, customer_id: 2, amount_total: 0, date_shipped: 2023-07-15, notes: Express  row: 0xffffb9452cc0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										
..Order[1] {AfterFlush Event} id: 1, customer_id: 2, amount_total: 0, date_shipped: 2023-07-15, notes: Express  row: 0xffffb9452cc0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Order[None] {Insert - client} id: None, customer_id: 3, amount_total: 150, date_shipped: None, notes: Regular  row: 0xffffb948bce0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Order[None] {server aggregate_defaults: amount_total } id: None, customer_id: 3, amount_total: 0, date_shipped: None, notes: Regular  row: 0xffffb948bce0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										
..Order[1] {AfterFlush Event} id: 1, customer_id: 3, amount_total: 0, date_shipped: None, notes: Regular  row: 0xffffb948bce0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Order[None] {Insert - client} id: None, customer_id: 4, amount_total: 250, date_shipped: 2023-07-10, notes: Overnight  row: 0xffffb948ba10  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Order[None] {server aggregate_defaults: amount_total } id: None, customer_id: 4, amount_total: 0, date_shipped: 2023-07-10, notes: Overnight  row: 0xffffb948ba10  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										
..Order[1] {AfterFlush Event} id: 1, customer_id: 4, amount_total: 0, date_shipped: 2023-07-10, notes: Overnight  row: 0xffffb948ba10  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Item[None] {Insert - client} id: None, order_id: 1, product_id: 1, quantity: 10, unit_price: 10, amount: 100  row: 0xffffb948b1d0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Item[None] {Missing Parent: order} id: None, order_id: 1, product_id: 1, quantity: 10, unit_price: 10, amount: 100  row: 0xffffb948b1d0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Item[None] {Insert - client} id: None, order_id: 1, product_id: 2, quantity: 5, unit_price: 20, amount: 100  row: 0xffffb948a630  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Item[None] {Missing Parent: order} id: None, order_id: 1, product_id: 2, quantity: 5, unit_price: 20, amount: 100  row: 0xffffb948a630  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Item[None] {Insert - client} id: None, order_id: 2, product_id: 3, quantity: 2, unit_price: 150, amount: 300  row: 0xffffb948b050  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Item[None] {Missing Parent: order} id: None, order_id: 2, product_id: 3, quantity: 2, unit_price: 150, amount: 300  row: 0xffffb948b050  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Item[None] {Insert - client} id: None, order_id: 3, product_id: 4, quantity: 3, unit_price: 50, amount: 150  row: 0xffffb948b890  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Item[None] {Missing Parent: order} id: None, order_id: 3, product_id: 4, quantity: 3, unit_price: 50, amount: 150  row: 0xffffb948b890  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Order[None] {Insert - client} id: None, customer_id: 1, amount_total: 200, date_shipped: None, notes: Urgent  row: 0xffffb948bda0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Order[None] {server aggregate_defaults: amount_total } id: None, customer_id: 1, amount_total: 0, date_shipped: None, notes: Urgent  row: 0xffffb948bda0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										
..Order[1] {AfterFlush Event} id: 1, customer_id: 1, amount_total: 0, date_shipped: None, notes: Urgent  row: 0xffffb948bda0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Order[None] {Insert - client} id: None, customer_id: 2, amount_total: 300, date_shipped: 2023-07-15, notes: Express  row: 0xffffb986f7a0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Order[None] {server aggregate_defaults: amount_total } id: None, customer_id: 2, amount_total: 0, date_shipped: 2023-07-15, notes: Express  row: 0xffffb986f7a0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										
..Order[1] {AfterFlush Event} id: 1, customer_id: 2, amount_total: 0, date_shipped: 2023-07-15, notes: Express  row: 0xffffb986f7a0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Order[None] {Insert - client} id: None, customer_id: 3, amount_total: 150, date_shipped: None, notes: Regular  row: 0xffffb9488fb0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Order[None] {server aggregate_defaults: amount_total } id: None, customer_id: 3, amount_total: 0, date_shipped: None, notes: Regular  row: 0xffffb9488fb0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										
..Order[1] {AfterFlush Event} id: 1, customer_id: 3, amount_total: 0, date_shipped: None, notes: Regular  row: 0xffffb9488fb0  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Order[None] {Insert - client} id: None, customer_id: 4, amount_total: 250, date_shipped: 2023-07-10, notes: Overnight  row: 0xffffb9489d90  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Order[None] {server aggregate_defaults: amount_total } id: None, customer_id: 4, amount_total: 0, date_shipped: 2023-07-10, notes: Overnight  row: 0xffffb9489d90  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		COMMIT LOGIC		(session=0xffffbbf10470)   										
Logic Phase:		AFTER_FLUSH LOGIC	(session=0xffffbbf10470)   										
..Order[1] {AfterFlush Event} id: 1, customer_id: 4, amount_total: 0, date_shipped: 2023-07-10, notes: Overnight  row: 0xffffb9489d90  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
Logic Phase:		ROW LOGIC IGNORE RE-RAISE(session=0xffffbbf10470) (sqlalchemy before_flush)			

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Item[None] {Insert - client} id: None, order_id: 1, product_id: 1, quantity: 10, unit_price: 10, amount: 100  row: 0xffffb948bb90  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Item[None] {Missing Parent: order} id: None, order_id: 1, product_id: 1, quantity: 10, unit_price: 10, amount: 100  row: 0xffffb948bb90  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Item[None] {Insert - client} id: None, order_id: 1, product_id: 2, quantity: 5, unit_price: 20, amount: 100  row: 0xffffb948b800  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Item[None] {Missing Parent: order} id: None, order_id: 1, product_id: 2, quantity: 5, unit_price: 20, amount: 100  row: 0xffffb948b800  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Item[None] {Insert - client} id: None, order_id: 2, product_id: 3, quantity: 2, unit_price: 150, amount: 300  row: 0xffffb948b500  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Item[None] {Missing Parent: order} id: None, order_id: 2, product_id: 3, quantity: 2, unit_price: 150, amount: 300  row: 0xffffb948b500  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins

Logic Phase:		ROW LOGIC		(session=0xffffbbf10470) (sqlalchemy before_flush)			
..Item[None] {Insert - client} id: None, order_id: 3, product_id: 4, quantity: 3, unit_price: 50, amount: 150  row: 0xffffba0b3470  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
..Item[None] {Missing Parent: order} id: None, order_id: 3, product_id: 4, quantity: 3, unit_price: 50, amount: 150  row: 0xffffba0b3470  session: 0xffffbbf10470  ins_upd_dlt: ins, initial: ins
*** Models.py Using TestBase ***
..  db_url: sqlite:////opt/projects/by-ulid/01JP732DJNM0EKQXAF2KA7VKKB/database/test_data/db.sqlite
..  cwd: /opt/projects/by-ulid/01JP732DJNM0EKQXAF2KA7VKKB
..  python_loc: /usr/local/bin/python
..  test_data_loader version: 1.1
..  LogicBank activated
print(Pass: 1)
Error adding variable to session: type object 'Order' has no attribute '_s_class_name'
Error adding variable to session: Missing Parent: order
print(Pass: 2)
Error adding variable to session: This Session's transaction has been rolled back due to a previous exception during flush. To begin a new transaction with this Session, first issue Session.rollback(). Original exception was: type object 'Order' has no attribute '_s_class_name' (Background on this error at: https://sqlalche.me/e/20/7s2a)
print(Pass: 3)
print(Pass: 4)
print(Pass: 5)
..  db_url: sqlite:////opt/projects/by-ulid/01JP732DJNM0EKQXAF2KA7VKKB/database/test_data/db.sqlite
..  cwd: /opt/projects/by-ulid/01JP732DJNM0EKQXAF2KA7VKKB
..  python_loc: /usr/local/bin/python
..  test_data_loader version: 1.1
..  LogicBank activated
print(Pass: 1)
Error adding variable to session: type object 'Order' has no attribute '_s_class_name'
Error adding variable to session: Missing Parent: order
print(Pass: 2)
Error adding variable to session: This Session's transaction has been rolled back due to a previous exception during flush. To begin a new transaction with this Session, first issue Session.rollback(). Original exception was: type object 'Order' has no attribute '_s_class_name' (Background on this error at: https://sqlalche.me/e/20/7s2a)
print(Pass: 3)
print(Pass: 4)
print(Pass: 5)
Error: near line 10: UNIQUE constraint failed: customer.id
Error: near line 11: UNIQUE constraint failed: customer.id
Error: near line 12: UNIQUE constraint failed: customer.id
Error: near line 13: UNIQUE constraint failed: customer.id
