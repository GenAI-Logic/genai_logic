{"rules": [{"name": "Customer Balance Rule", "description": "Ensure customer balance does not exceed their credit limit", "use_case": "Check Credit", "code": "Rule.constraint(validate=Customer,\n                as_condition=lambda row: row.balance <= row.credit_limit,\n                error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")", "error": null, "status": "active", "entity": "Customer", "id": "01JP733V268CKQNJPD728B8Y5H"}, {"name": "Customer Balance Sum Rule", "description": "Sum of orders where date_shipped is null to derive customer balance", "use_case": "Check Credit", "code": "Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)", "error": null, "status": "active", "entity": "Customer", "id": "01JP733V29MY8WSZVNH7XA1MJT"}, {"name": "Order Amount Total Sum Rule", "description": "Calculate order amount total as the sum of item amounts", "use_case": "Check Credit", "code": "Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)", "error": null, "status": "active", "entity": "Order", "id": "01JP733V2AA51Q598FT9NNAMDN"}, {"name": "Item Amount Formula Rule", "description": "Calculate item amount based on quantity and unit price", "use_case": "Check Credit", "code": "Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)", "error": null, "status": "active", "entity": "Item", "id": "01JP733V2BMD1W3QZX4RZ92QX1"}, {"name": "Item Unit Price Copy Rule", "description": "Copy product unit price to item unit price", "use_case": "Check Credit", "code": "Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)", "error": null, "status": "active", "entity": "Item", "id": "01JP733V2CZX51BKNT6FHPF0N8"}, {"name": "Customer Balance Constraint", "description": "Ensures the customer's balance is aligned with the credit limit.", "use_case": "Customer.balance <= credit_limit", "code": "Rule.constraint(validate=Customer,\n                as_condition=lambda row: row.balance <= row.credit_limit,\n                error_msg='Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})')", "error": null, "status": "active", "entity": null, "id": "01JP732EZV7MB5EW8X45B6X8FE"}, {"name": "Order Kafka Integration", "description": "Sends the order to Kafka topic 'order_shipping' if the date shipped is not None.", "use_case": "App Integration", "code": "Rule.after_flush_row_event(on_class=Order, calling=kafka_producer.send_row_to_kafka, if_condition=lambda row: row.date_shipped is not None, with_args={\"topic\": \"order_shipping\"})", "error": null, "status": "active", "entity": null, "id": "01JP732F0AF6ECED61ENW0PT21"}, {"name": "Customer Name Constraint", "description": "Ensures the customer's name cannot be 'x'.", "use_case": "Customer.name != 'x'", "code": "Rule.constraint(validate=Customer, as_condition=lambda row: row.name != 'x', error_msg=\"Customer name cannot be 'x'\")", "error": null, "status": "active", "entity": null, "id": "01JP732F0D701XE32B8SJNE0JR"}, {"name": "Customer Name Constraint", "description": "Ensures that the customer's name cannot be 'y'.", "use_case": "Customer.name != 'y'", "code": "Rule.constraint(validate=Customer,\n                as_condition=lambda row: row.name != 'y',\n                error_msg=\"Customer name cannot be 'y'\")", "error": null, "status": "active", "entity": null, "id": "01JP732F0GBQ2A9KWHVX5AGQNK"}], "models": [{"classname": "Customer", "code": "class Customer(Base):  # type: ignore\n    \"\"\"\n    description: Model for storing customer information including balance and credit limit.\n    \"\"\"\n    __tablename__ = 'customer'\n    _s_collection_name = 'Customer'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n    balance : DECIMAL = Column(DECIMAL)\n    credit_limit : DECIMAL = Column(DECIMAL)\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    OrderList : Mapped[List[\"Order\"]] = relationship(back_populates=\"customer\")"}, {"classname": "Product", "code": "class Product(Base):  # type: ignore\n    \"\"\"\n    description: Model for storing product information including name and unit price.\n    \"\"\"\n    __tablename__ = 'product'\n    _s_collection_name = 'Product'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n    unit_price : DECIMAL = Column(DECIMAL)\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    ItemList : Mapped[List[\"Item\"]] = relationship(back_populates=\"product\")"}, {"classname": "Order", "code": "class Order(Base):  # type: ignore\n    \"\"\"\n    description: Model for storing order information including link to customer and notes.\n    \"\"\"\n    __tablename__ = 'order'\n    _s_collection_name = 'Order'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    customer_id = Column(ForeignKey('customer.id'))\n    amount_total : DECIMAL = Column(DECIMAL)\n    date_shipped = Column(Date)\n    notes = Column(String(200))\n\n    # parent relationships (access parent)\n    customer : Mapped[\"Customer\"] = relationship(back_populates=(\"OrderList\"))\n\n    # child relationships (access children)\n    ItemList : Mapped[List[\"Item\"]] = relationship(back_populates=\"order\")\n    OrderDetailList : Mapped[List[\"OrderDetail\"]] = relationship(back_populates=\"order\")"}, {"classname": "Item", "code": "class Item(Base):  # type: ignore\n    \"\"\"\n    description: Model for storing item details including quantity and calculated amount.\n    \"\"\"\n    __tablename__ = 'item'\n    _s_collection_name = 'Item'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    order_id = Column(ForeignKey('order.id'))\n    product_id = Column(ForeignKey('product.id'))\n    quantity = Column(Integer)\n    unit_price : DECIMAL = Column(DECIMAL)\n    amount : DECIMAL = Column(DECIMAL)\n\n    # parent relationships (access parent)\n    order : Mapped[\"Order\"] = relationship(back_populates=(\"ItemList\"))\n    product : Mapped[\"Product\"] = relationship(back_populates=(\"ItemList\"))\n\n    # child relationships (access children)\n    OrderDetailList : Mapped[List[\"OrderDetail\"]] = relationship(back_populates=\"item\")"}, {"classname": "OrderDetail", "code": "class OrderDetail(Base):  # type: ignore\n    \"\"\"\n    description: Model for storing order detail linking orders and items.\n    \"\"\"\n    __tablename__ = 'order_detail'\n    _s_collection_name = 'OrderDetail'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    order_id = Column(ForeignKey('order.id'))\n    item_id = Column(ForeignKey('item.id'))\n\n    # parent relationships (access parent)\n    item : Mapped[\"Item\"] = relationship(back_populates=(\"OrderDetailList\"))\n    order : Mapped[\"Order\"] = relationship(back_populates=(\"OrderDetailList\"))"}]}
