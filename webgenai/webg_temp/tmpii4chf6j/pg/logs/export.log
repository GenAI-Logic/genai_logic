{"rules": [], "models": [{"classname": "Category", "code": "class Category(Base):  # type: ignore\n    __tablename__ = 'categories'\n    _s_collection_name = 'Category'  # type: ignore\n\n    category_id = Column('category_id', SmallInteger, server_default=text(\"0\"), primary_key=True, quote = True)\n    category_name = Column('category_name', String(15), nullable=False, quote = True)\n    description = Column('description', Text, quote = True)\n    picture = Column('picture', LargeBinary, quote = True)\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    ProductList : Mapped[List[\"Product\"]] = relationship(back_populates=\"category\")"}, {"classname": "CustomerDemographic", "code": "class CustomerDemographic(Base):  # type: ignore\n    __tablename__ = 'customer_demographics'\n    _s_collection_name = 'CustomerDemographic'  # type: ignore\n\n    customer_type_id = Column('customer_type_id', String(5), primary_key=True, quote = True)\n    customer_desc = Column('customer_desc', Text, quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    CustomerCustomerDemoList : Mapped[List[\"CustomerCustomerDemo\"]] = relationship(back_populates=\"customer_type\")"}, {"classname": "Customer", "code": "class Customer(Base):  # type: ignore\n    __tablename__ = 'customers'\n    _s_collection_name = 'Customer'  # type: ignore\n\n    customer_id = Column('customer_id', String(5), primary_key=True, quote = True)\n    company_name = Column('company_name', String(40), nullable=False, quote = True)\n    contact_name = Column('contact_name', String(30), quote = True)\n    contact_title = Column('contact_title', String(30), quote = True)\n    address = Column('address', String(60), quote = True)\n    city = Column('city', String(15), quote = True)\n    region = Column('region', String(15), quote = True)\n    postal_code = Column('postal_code', String(10), quote = True)\n    country = Column('country', String(15), quote = True)\n    phone = Column('phone', String(24), quote = True)\n    fax = Column('fax', String(24), quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    CustomerCustomerDemoList : Mapped[List[\"CustomerCustomerDemo\"]] = relationship(back_populates=\"customer\")\n    OrderList : Mapped[List[\"Order\"]] = relationship(back_populates=\"customer\")"}, {"classname": "DeviceType", "code": "class DeviceType(Base):  # type: ignore\n    __tablename__ = 'device_types'\n    _s_collection_name = 'DeviceType'  # type: ignore\n\n    unique_id = Column('unique_id', Integer, server_default=text(\"nextval('device_types_unique_id_seq'::regclass)\"), primary_key=True, quote = True)\n    device_type = Column('device_type', Text, nullable=False, unique=True, quote = True)\n    create_date = Column('create_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    update_date = Column('update_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    is_inactive = Column('is_inactive', Boolean, server_default=text(\"false\"), quote = True)\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    DeviceList : Mapped[List[\"Device\"]] = relationship(back_populates=\"device_type\")"}, {"classname": "Employee", "code": "class Employee(Base):  # type: ignore\n    __tablename__ = 'employees'\n    _s_collection_name = 'Employee'  # type: ignore\n\n    employee_id = Column('employee_id', SmallInteger, primary_key=True, quote = True)\n    last_name = Column('last_name', String(20), nullable=False, quote = True)\n    first_name = Column('first_name', String(10), nullable=False, quote = True)\n    title = Column('title', String(30), quote = True)\n    title_of_courtesy = Column('title_of_courtesy', String(25), quote = True)\n    birth_date = Column('birth_date', Date, quote = True)\n    hire_date = Column('hire_date', Date, quote = True)\n    address = Column('address', String(60), quote = True)\n    city = Column('city', String(15), quote = True)\n    region = Column('region', String(15), quote = True)\n    postal_code = Column('postal_code', String(10), quote = True)\n    country = Column('country', String(15), quote = True)\n    home_phone = Column('home_phone', String(24), quote = True)\n    extension = Column('extension', String(4), quote = True)\n    photo = Column('photo', LargeBinary, quote = True)\n    notes = Column('notes', Text, quote = True)\n    reports_to = Column('reports_to', ForeignKey('employees.employee_id'), quote = True)\n    photo_path = Column('photo_path', String(255), quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n    Employee : Mapped[\"Employee\"] = relationship(remote_side=[employee_id], back_populates=(\"EmployeeList\"))\n\n    # child relationships (access children)\n    EmployeeList : Mapped[List[\"Employee\"]] = relationship(back_populates=\"Employee\")\n    OrderList : Mapped[List[\"Order\"]] = relationship(back_populates=\"employee\")\n    EmployeeTerritoryList : Mapped[List[\"EmployeeTerritory\"]] = relationship(back_populates=\"employee\")"}, {"classname": "EquipmentType", "code": "class EquipmentType(Base):  # type: ignore\n    __tablename__ = 'equipment_types'\n    _s_collection_name = 'EquipmentType'  # type: ignore\n\n    unique_id = Column('unique_id', Integer, server_default=text(\"nextval('equipment_types_unique_id_seq'::regclass)\"), primary_key=True, quote = True)\n    equipment_type = Column('equipment_type', Text, nullable=False, unique=True, quote = True)\n    create_date = Column('create_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    update_date = Column('update_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    is_inactive = Column('is_inactive', Boolean, server_default=text(\"false\"), quote = True)\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    EquipmentList : Mapped[List[\"Equipment\"]] = relationship(back_populates=\"equipment_type\")"}, {"classname": "EventSubjectsType", "code": "class EventSubjectsType(Base):  # type: ignore\n    __tablename__ = 'event_subjects_types'\n    _s_collection_name = 'EventSubjectsType'  # type: ignore\n\n    unique_id = Column('unique_id', Integer, server_default=text(\"nextval('event_subjects_types_unique_id_seq'::regclass)\"), primary_key=True, quote = True)\n    event_subject_type = Column('event_subject_type', Text, nullable=False, unique=True, quote = True)\n    create_date = Column('create_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    update_date = Column('update_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    is_inactive = Column('is_inactive', Boolean, server_default=text(\"false\"), quote = True)"}, {"classname": "EventType", "code": "class EventType(Base):  # type: ignore\n    __tablename__ = 'event_types'\n    _s_collection_name = 'EventType'  # type: ignore\n\n    unique_id = Column('unique_id', Integer, server_default=text(\"nextval('event_types_unique_id_seq'::regclass)\"), primary_key=True, quote = True)\n    event_type = Column('event_type', Text, nullable=False, unique=True, quote = True)\n    create_date = Column('create_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    update_date = Column('update_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    is_inactive = Column('is_inactive', Boolean, server_default=text(\"false\"), quote = True)\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    EventsLogList : Mapped[List[\"EventsLog\"]] = relationship(back_populates=\"event_type\")"}, {"classname": "LogLevel", "code": "class LogLevel(Base):  # type: ignore\n    __tablename__ = 'log_levels'\n    _s_collection_name = 'LogLevel'  # type: ignore\n\n    unique_id = Column('unique_id', Integer, server_default=text(\"nextval('log_levels_unique_id_seq'::regclass)\"), primary_key=True, quote = True)\n    log_level = Column('log_level', Text, nullable=False, unique=True, quote = True)\n    create_date = Column('create_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    update_date = Column('update_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    is_inactive = Column('is_inactive', Boolean, server_default=text(\"false\"), quote = True)\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    EventsLogList : Mapped[List[\"EventsLog\"]] = relationship(back_populates=\"log_level\")"}, {"classname": "Region", "code": "class Region(Base):  # type: ignore\n    __tablename__ = 'region'\n    _s_collection_name = 'Region'  # type: ignore\n\n    region_id = Column('region_id', SmallInteger, primary_key=True, quote = True)\n    region_description = Column('region_description', String(60), nullable=False, quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    TerritoryList : Mapped[List[\"Territory\"]] = relationship(back_populates=\"region\")"}, {"classname": "SensorsLine", "code": "class SensorsLine(Base):  # type: ignore\n    __tablename__ = 'sensors_lines'\n    _s_collection_name = 'SensorsLine'  # type: ignore\n\n    unique_id = Column('unique_id', Integer, server_default=text(\"nextval('sensors_lines_unique_id_seq'::regclass)\"), primary_key=True, quote = True)\n    uuid_id = Column('uuid_id', Uuid, server_default=text(\"gen_random_uuid()\"), quote = True)\n    is_digital = Column('is_digital', Boolean, server_default=text(\"true\"), quote = True)\n    sensor_line_label = Column('sensor_line_label', Text, nullable=False, unique=True, quote = True)\n    create_date = Column('create_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    update_date = Column('update_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    is_inactive = Column('is_inactive', Boolean, server_default=text(\"false\"), quote = True)\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    DeviceSensorsLineList : Mapped[List[\"DeviceSensorsLine\"]] = relationship(back_populates=\"sensor_line\")"}, {"classname": "Shipper", "code": "class Shipper(Base):  # type: ignore\n    __tablename__ = 'shippers'\n    _s_collection_name = 'Shipper'  # type: ignore\n\n    shipper_id = Column('shipper_id', SmallInteger, primary_key=True, quote = True)\n    company_name = Column('company_name', String(40), nullable=False, quote = True)\n    phone = Column('phone', String(24), quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    OrderList : Mapped[List[\"Order\"]] = relationship(back_populates=\"shipper\")"}, {"classname": "Supplier", "code": "class Supplier(Base):  # type: ignore\n    __tablename__ = 'suppliers'\n    _s_collection_name = 'Supplier'  # type: ignore\n\n    supplier_id = Column('supplier_id', SmallInteger, primary_key=True, quote = True)\n    company_name = Column('company_name', String(40), nullable=False, quote = True)\n    contact_name = Column('contact_name', String(30), quote = True)\n    contact_title = Column('contact_title', String(30), quote = True)\n    address = Column('address', String(60), quote = True)\n    city = Column('city', String(15), quote = True)\n    region = Column('region', String(15), quote = True)\n    postal_code = Column('postal_code', String(10), quote = True)\n    country = Column('country', String(15), quote = True)\n    phone = Column('phone', String(24), quote = True)\n    fax = Column('fax', String(24), quote = True)\n    homepage = Column('homepage', Text, quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    ProductList : Mapped[List[\"Product\"]] = relationship(back_populates=\"supplier\")"}, {"classname": "UsState", "code": "class UsState(Base):  # type: ignore\n    __tablename__ = 'us_states'\n    _s_collection_name = 'UsState'  # type: ignore\n\n    state_id = Column('state_id', SmallInteger, primary_key=True, quote = True)\n    state_name = Column('state_name', String(100), quote = True)\n    state_abbr = Column('state_abbr', String(2), quote = True)\n    state_region = Column('state_region', String(50), quote = True)\n    allow_client_generated_ids = True"}, {"classname": "Vessel", "code": "class Vessel(Base):  # type: ignore\n    __tablename__ = 'vessels'\n    _s_collection_name = 'Vessel'  # type: ignore\n\n    unique_id = Column('unique_id', Integer, server_default=text(\"nextval('vessels_unique_id_seq'::regclass)\"), primary_key=True, quote = True)\n    create_date = Column('create_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    update_date = Column('update_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    vessel_name = Column('vessel_name', Text, nullable=False, quote = True)\n    imo_number = Column('imo_number', Text, nullable=False, quote = True)\n    is_inactive = Column('is_inactive', Boolean, server_default=text(\"false\"), quote = True)\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    VesselEquipmentList : Mapped[List[\"VesselEquipment\"]] = relationship(back_populates=\"vessel\")"}, {"classname": "CustomerCustomerDemo", "code": "class CustomerCustomerDemo(Base):  # type: ignore\n    __tablename__ = 'customer_customer_demo'\n    _s_collection_name = 'CustomerCustomerDemo'  # type: ignore\n\n    customer_id = Column('customer_id', ForeignKey('customers.customer_id'), primary_key=True, nullable=False, quote = True)\n    customer_type_id = Column('customer_type_id', ForeignKey('customer_demographics.customer_type_id'), primary_key=True, nullable=False, quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n    customer : Mapped[\"Customer\"] = relationship(back_populates=(\"CustomerCustomerDemoList\"))\n    customer_type : Mapped[\"CustomerDemographic\"] = relationship(back_populates=(\"CustomerCustomerDemoList\"))"}, {"classname": "Device", "code": "class Device(Base):  # type: ignore\n    __tablename__ = 'devices'\n    _s_collection_name = 'Device'  # type: ignore\n\n    unique_id = Column('unique_id', Integer, server_default=text(\"nextval('devices_unique_id_seq'::regclass)\"), primary_key=True, quote = True)\n    ip_address = Column('ip_address', Text, nullable=False, unique=True, quote = True)\n    device_type_id = Column('device_type_id', ForeignKey('device_types.unique_id'), quote = True)\n    create_date = Column('create_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    update_date = Column('update_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    is_inactive = Column('is_inactive', Boolean, server_default=text(\"false\"), quote = True)\n\n    # parent relationships (access parent)\n    device_type : Mapped[\"DeviceType\"] = relationship(back_populates=(\"DeviceList\"))\n\n    # child relationships (access children)\n    DeviceSensorsLineList : Mapped[List[\"DeviceSensorsLine\"]] = relationship(back_populates=\"device\")"}, {"classname": "Equipment", "code": "class Equipment(Base):  # type: ignore\n    __tablename__ = 'equipment'\n    _s_collection_name = 'Equipment'  # type: ignore\n\n    unique_id = Column('unique_id', Integer, server_default=text(\"nextval('equipment_unique_id_seq'::regclass)\"), primary_key=True, quote = True)\n    create_date = Column('create_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    update_date = Column('update_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    equipment_type_id = Column('equipment_type_id', ForeignKey('equipment_types.unique_id'), quote = True)\n    equipment_name = Column('equipment_name', Text, nullable=False, quote = True)\n    is_inactive = Column('is_inactive', Boolean, server_default=text(\"false\"), quote = True)\n\n    # parent relationships (access parent)\n    equipment_type : Mapped[\"EquipmentType\"] = relationship(back_populates=(\"EquipmentList\"))\n\n    # child relationships (access children)\n    VesselEquipmentList : Mapped[List[\"VesselEquipment\"]] = relationship(back_populates=\"equipment\")"}, {"classname": "EventsLog", "code": "class EventsLog(Base):  # type: ignore\n    __tablename__ = 'events_log'\n    _s_collection_name = 'EventsLog'  # type: ignore\n\n    subject_of_change_id = Column('subject_of_change_id', Integer, primary_key=True, nullable=False, quote = True)\n    subject_of_change_type_id = Column('subject_of_change_type_id', Integer, primary_key=True, nullable=False, quote = True)\n    event_type_id = Column('event_type_id', ForeignKey('event_types.unique_id'), quote = True)\n    previous_state_value = Column('previous_state_value', Text, quote = True)\n    new_state_value = Column('new_state_value', Text, quote = True)\n    log_level_id = Column('log_level_id', ForeignKey('log_levels.unique_id'), quote = True)\n    create_date = Column('create_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    update_date = Column('update_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    is_inactive = Column('is_inactive', Boolean, server_default=text(\"false\"), quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n    event_type : Mapped[\"EventType\"] = relationship(back_populates=(\"EventsLogList\"))\n    log_level : Mapped[\"LogLevel\"] = relationship(back_populates=(\"EventsLogList\"))"}, {"classname": "Order", "code": "class Order(Base):  # type: ignore\n    __tablename__ = 'orders'\n    _s_collection_name = 'Order'  # type: ignore\n\n    order_id = Column('order_id', SmallInteger, primary_key=True, quote = True)\n    customer_id = Column('customer_id', ForeignKey('customers.customer_id'), quote = True)\n    employee_id = Column('employee_id', ForeignKey('employees.employee_id'), quote = True)\n    order_date = Column('order_date', Date, quote = True)\n    required_date = Column('required_date', Date, quote = True)\n    shipped_date = Column('shipped_date', Date, quote = True)\n    ship_via = Column('ship_via', ForeignKey('shippers.shipper_id'), quote = True)\n    freight = Column('freight', Float, quote = True)\n    ship_name = Column('ship_name', String(40), quote = True)\n    ship_address = Column('ship_address', String(60), quote = True)\n    ship_city = Column('ship_city', String(15), quote = True)\n    ship_region = Column('ship_region', String(15), quote = True)\n    ship_postal_code = Column('ship_postal_code', String(10), quote = True)\n    ship_country = Column('ship_country', String(15), quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n    customer : Mapped[\"Customer\"] = relationship(back_populates=(\"OrderList\"))\n    employee : Mapped[\"Employee\"] = relationship(back_populates=(\"OrderList\"))\n    shipper : Mapped[\"Shipper\"] = relationship(back_populates=(\"OrderList\"))\n\n    # child relationships (access children)\n    OrderDetailList : Mapped[List[\"OrderDetail\"]] = relationship(back_populates=\"order\")"}, {"classname": "Product", "code": "class Product(Base):  # type: ignore\n    __tablename__ = 'products'\n    _s_collection_name = 'Product'  # type: ignore\n\n    product_id = Column('product_id', SmallInteger, primary_key=True, quote = True)\n    product_name = Column('product_name', String(40), nullable=False, quote = True)\n    supplier_id = Column('supplier_id', ForeignKey('suppliers.supplier_id'), quote = True)\n    category_id = Column('category_id', ForeignKey('categories.category_id'), quote = True)\n    quantity_per_unit = Column('quantity_per_unit', String(20), quote = True)\n    unit_price = Column('unit_price', Float, quote = True)\n    units_in_stock = Column('units_in_stock', SmallInteger, quote = True)\n    units_on_order = Column('units_on_order', SmallInteger, quote = True)\n    reorder_level = Column('reorder_level', SmallInteger, quote = True)\n    discontinued = Column('discontinued', Integer, nullable=False, quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n    category : Mapped[\"Category\"] = relationship(back_populates=(\"ProductList\"))\n    supplier : Mapped[\"Supplier\"] = relationship(back_populates=(\"ProductList\"))\n\n    # child relationships (access children)\n    OrderDetailList : Mapped[List[\"OrderDetail\"]] = relationship(back_populates=\"product\")"}, {"classname": "Territory", "code": "class Territory(Base):  # type: ignore\n    __tablename__ = 'territories'\n    _s_collection_name = 'Territory'  # type: ignore\n\n    territory_id = Column('territory_id', String(20), primary_key=True, quote = True)\n    territory_description = Column('territory_description', String(60), nullable=False, quote = True)\n    region_id = Column('region_id', ForeignKey('region.region_id'), nullable=False, quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n    region : Mapped[\"Region\"] = relationship(back_populates=(\"TerritoryList\"))\n\n    # child relationships (access children)\n    EmployeeTerritoryList : Mapped[List[\"EmployeeTerritory\"]] = relationship(back_populates=\"territory\")"}, {"classname": "DeviceSensorsLine", "code": "class DeviceSensorsLine(Base):  # type: ignore\n    __tablename__ = 'device_sensors_lines'\n    _s_collection_name = 'DeviceSensorsLine'  # type: ignore\n\n    device_id = Column('device_id', ForeignKey('devices.unique_id'), primary_key=True, nullable=False, quote = True)\n    sensor_line_id = Column('sensor_line_id', ForeignKey('sensors_lines.unique_id'), primary_key=True, nullable=False, quote = True)\n    create_date = Column('create_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    update_date = Column('update_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    is_inactive = Column('is_inactive', Boolean, server_default=text(\"false\"), quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n    device : Mapped[\"Device\"] = relationship(back_populates=(\"DeviceSensorsLineList\"))\n    sensor_line : Mapped[\"SensorsLine\"] = relationship(back_populates=(\"DeviceSensorsLineList\"))"}, {"classname": "EmployeeTerritory", "code": "class EmployeeTerritory(Base):  # type: ignore\n    __tablename__ = 'employee_territories'\n    _s_collection_name = 'EmployeeTerritory'  # type: ignore\n\n    employee_id = Column('employee_id', ForeignKey('employees.employee_id'), primary_key=True, nullable=False, quote = True)\n    territory_id = Column('territory_id', ForeignKey('territories.territory_id'), primary_key=True, nullable=False, quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n    employee : Mapped[\"Employee\"] = relationship(back_populates=(\"EmployeeTerritoryList\"))\n    territory : Mapped[\"Territory\"] = relationship(back_populates=(\"EmployeeTerritoryList\"))"}, {"classname": "OrderDetail", "code": "class OrderDetail(Base):  # type: ignore\n    __tablename__ = 'order_details'\n    _s_collection_name = 'OrderDetail'  # type: ignore\n\n    order_id = Column('order_id', ForeignKey('orders.order_id'), primary_key=True, nullable=False, quote = True)\n    product_id = Column('product_id', ForeignKey('products.product_id'), primary_key=True, nullable=False, quote = True)\n    unit_price = Column('unit_price', Float, nullable=False, quote = True)\n    quantity = Column('quantity', SmallInteger, nullable=False, quote = True)\n    discount = Column('discount', Float, nullable=False, quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n    order : Mapped[\"Order\"] = relationship(back_populates=(\"OrderDetailList\"))\n    product : Mapped[\"Product\"] = relationship(back_populates=(\"OrderDetailList\"))"}, {"classname": "VesselEquipment", "code": "class VesselEquipment(Base):  # type: ignore\n    __tablename__ = 'vessel_equipment'\n    _s_collection_name = 'VesselEquipment'  # type: ignore\n\n    vessel_id = Column('vessel_id', ForeignKey('vessels.unique_id'), primary_key=True, nullable=False, quote = True)\n    equipment_id = Column('equipment_id', ForeignKey('equipment.unique_id'), primary_key=True, nullable=False, quote = True)\n    create_date = Column('create_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    update_date = Column('update_date', DateTime, server_default=text(\"CURRENT_TIMESTAMP\"), quote = True)\n    is_inactive = Column('is_inactive', Boolean, server_default=text(\"false\"), quote = True)\n    allow_client_generated_ids = True\n\n    # parent relationships (access parent)\n    equipment : Mapped[\"Equipment\"] = relationship(back_populates=(\"VesselEquipmentList\"))\n    vessel : Mapped[\"Vessel\"] = relationship(back_populates=(\"VesselEquipmentList\"))"}]}
