"models":
- "classname": |-
    Customer
  "code": |+
    class Customer(base):
        __tablename__ = "customer"
        id = Column(Integer, primary_key=True, autoincrement=True)
        name = Column(String(80))
        credit_limit = Column(Decimal)
        balance = Column(Decimal)

  "description": |-
    Represents a customer with a balance and credit limit.
  "name": |-
    Customer
- "classname": |-
    Order
  "code": |+
    class Order(base):
        __tablename__ = "order"
        id = Column(Integer, primary_key=True, autoincrement=True)
        customer_id = Column(Integer, ForeignKey('customer.id'))
        date_shipped = Column(Date, nullable=True)
        amount_total = Column(Decimal)
        notes = Column(String, nullable=True)

  "description": |-
    Represents an order placed by a customer with optional shipping date and notes.
  "name": |-
    Order
- "classname": |-
    Item
  "code": |+
    class Item(base):
        __tablename__ = "item"
        id = Column(Integer, primary_key=True, autoincrement=True)
        order_id = Column(Integer, ForeignKey('order.id'))
        quantity = Column(Integer)
        unit_price = Column(Decimal)
        amount = Column(Decimal)
        product_id = Column(Integer, ForeignKey('product.id'))

  "description": |-
    An item within an order that references a product and has a quantity, unit price, and calculated amount.
  "name": |-
    Item
- "classname": |-
    Product
  "code": |+
    class Product(base):
        __tablename__ = "product"
        id = Column(Integer, primary_key=True, autoincrement=True)
        name = Column(String(120))
        unit_price = Column(Decimal)

  "description": |-
    Represents a product with a unit price.
  "name": |-
    Product
- "classname": |-
    Supplier
  "code": |+
    class Supplier(base):
        __tablename__ = "supplier"
        id = Column(Integer, primary_key=True, autoincrement=True)
        name = Column(String(60))

  "description": |-
    A supplier entity providing products.
  "name": |-
    Supplier
- "classname": |-
    Category
  "code": |+
    class Category(base):
        __tablename__ = "category"
        id = Column(Integer, primary_key=True, autoincrement=True)
        name = Column(String(50))

  "description": |-
    Categorizes different products.
  "name": |-
    Category
- "classname": |-
    Store
  "code": |+
    class Store(base):
        __tablename__ = "store"
        id = Column(Integer, primary_key=True, autoincrement=True)
        name = Column(String(100))

  "description": |-
    Stores that hold or sell products.
  "name": |-
    Store
- "classname": |-
    Inventory
  "code": |+
    class Inventory(base):
        __tablename__ = "inventory"
        id = Column(Integer, primary_key=True, autoincrement=True)
        product_id = Column(Integer, ForeignKey('product.id'))
        store_id = Column(Integer, ForeignKey('store.id'))
        quantity = Column(Integer)

  "description": |-
    Keeps track of products available in different stores.
  "name": |-
    Inventory
- "classname": |-
    Warehouse
  "code": |+
    class Warehouse(base):
        __tablename__ = "warehouse"
        id = Column(Integer, primary_key=True, autoincrement=True)
        location = Column(String(120))

  "description": |-
    Warehouse containing inventories of products.
  "name": |-
    Warehouse
- "classname": |-
    Shipment
  "code": |+
    class Shipment(base):
        __tablename__ = "shipment"
        id = Column(Integer, primary_key=True, autoincrement=True)
        warehouse_id = Column(Integer, ForeignKey('warehouse.id'))
        shipment_date = Column(DateTime)

  "description": |-
    A shipment that originates from a warehouse.
  "name": |-
    Shipment
- "classname": |-
    Promotion
  "code": |+
    class Promotion(base):
        __tablename__ = "promotion"
        id = Column(Integer, primary_key=True, autoincrement=True)
        description = Column(String(200))
        discount = Column(Decimal)

  "description": |-
    Marketing promotions offering discounts.
  "name": |-
    Promotion
- "classname": |-
    CustomerGroup
  "code": |+
    class CustomerGroup(base):
        __tablename__ = "customer_group"
        id = Column(Integer, primary_key=True, autoincrement=True)
        name = Column(String(100))

  "description": |-
    Groups that categorize customers, such as VIP, Regular, etc.
  "name": |-
    CustomerGroup
"name": |-
  BusinessSystem
"rules":
- "code": |-
    Rule.constraint(validate=Customer,
                    as_condition=lambda row: row.balance <= row.credit_limit,
                    error_msg="Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})")
  "description": |-
    The customer's balance should be less than the credit limit.
  "entity": |-
    Customer
  "name": |-
    Customer Balance Constraint
  "use_case": |-
    Check Credit
- "code": "Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, \n    \
    \      where=lambda row: row.date_shipped is None)"
  "description": |-
    Calculate customer's balance as the sum of the order amount totals (unshipped).
  "entity": |-
    Customer
  "name": |-
    Customer Balance Derivation
  "use_case": |-
    Check Credit
- "code": |-
    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)
  "description": |-
    Calculate order amount_total as the sum of item amounts.
  "entity": |-
    Order
  "name": |-
    Order Amount Total Derivation
  "use_case": |-
    Check Credit
- "code": "Rule.formula(derive=Item.amount, \n          as_expression=lambda row:\
    \ row.quantity * row.unit_price)"
  "description": |-
    Item amount is derived as quantity * unit_price.
  "entity": |-
    Item
  "name": |-
    Item Amount Formula
  "use_case": |-
    Check Credit
- "code": |-
    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)
  "description": |-
    Item unit price is copied from the product's unit price.
  "entity": |-
    Item
  "name": |-
    Item Unit Price Copy From Product
  "use_case": |-
    Check Credit
"test_data": |-
  # Here are test data instances for the classes

  # Test data for Customers
  customer1 = Customer(name="John Doe", credit_limit=1000, balance=0)
  customer2 = Customer(name="Jane Smith", credit_limit=1500, balance=0)
  customer3 = Customer(name="Alice Johnson", credit_limit=750, balance=0)
  customer4 = Customer(name="Bob Brown", credit_limit=1200, balance=0)

  # Test data for Orders
  order1 = Order(customer_id=1, date_shipped=date(2023, 10, 10), amount_total=0, notes="Urgent Delivery")
  order2 = Order(customer_id=2, date_shipped=None, amount_total=0, notes="Gift Wrapped")
  order3 = Order(customer_id=3, date_shipped=None, amount_total=0, notes="Standard Shipping")
  order4 = Order(customer_id=1, date_shipped=date(2023, 10, 15), amount_total=0, notes="Express")

  # Test data for Items
  item1 = Item(order_id=1, quantity=3, unit_price=Decimal('20.00'), amount=0, product_id=1)
  item2 = Item(order_id=2, quantity=5, unit_price=Decimal('15.00'), amount=0, product_id=2)
  item3 = Item(order_id=3, quantity=2, unit_price=Decimal('10.00'), amount=0, product_id=3)
  item4 = Item(order_id=4, quantity=4, unit_price=Decimal('12.00'), amount=0, product_id=1)

  # Test data for Products
  product1 = Product(name="Widget", unit_price=Decimal('20.00'))
  product2 = Product(name="Gadget", unit_price=Decimal('15.00'))
  product3 = Product(name="Thingamajig", unit_price=Decimal('10.00'))
  product4 = Product(name="Doodad", unit_price=Decimal('12.00'))
"test_data_rows":
- "code": |-
    customer1 = Customer(name="John Doe", credit_limit=1000, balance=0)
  "test_data_row_variable": |-
    customer1
- "code": |-
    customer2 = Customer(name="Jane Smith", credit_limit=1500, balance=0)
  "test_data_row_variable": |-
    customer2
- "code": |-
    customer3 = Customer(name="Alice Johnson", credit_limit=750, balance=0)
  "test_data_row_variable": |-
    customer3
- "code": |-
    customer4 = Customer(name="Bob Brown", credit_limit=1200, balance=0)
  "test_data_row_variable": |-
    customer4
- "code": |-
    order1 = Order(customer_id=1, date_shipped=date(2023, 10, 10), amount_total=0, notes="Urgent Delivery")
  "test_data_row_variable": |-
    order1
- "code": |-
    order2 = Order(customer_id=2, date_shipped=None, amount_total=0, notes="Gift Wrapped")
  "test_data_row_variable": |-
    order2
- "code": |-
    order3 = Order(customer_id=3, date_shipped=None, amount_total=0, notes="Standard Shipping")
  "test_data_row_variable": |-
    order3
- "code": |-
    order4 = Order(customer_id=1, date_shipped=date(2023, 10, 15), amount_total=0, notes="Express")
  "test_data_row_variable": |-
    order4
- "code": |-
    item1 = Item(order_id=1, quantity=3, unit_price=Decimal('20.00'), amount=0, product_id=1)
  "test_data_row_variable": |-
    item1
- "code": |-
    item2 = Item(order_id=2, quantity=5, unit_price=Decimal('15.00'), amount=0, product_id=2)
  "test_data_row_variable": |-
    item2
- "code": |-
    item3 = Item(order_id=3, quantity=2, unit_price=Decimal('10.00'), amount=0, product_id=3)
  "test_data_row_variable": |-
    item3
- "code": |-
    item4 = Item(order_id=4, quantity=4, unit_price=Decimal('12.00'), amount=0, product_id=1)
  "test_data_row_variable": |-
    item4
- "code": |-
    product1 = Product(name="Widget", unit_price=Decimal('20.00'))
  "test_data_row_variable": |-
    product1
- "code": |-
    product2 = Product(name="Gadget", unit_price=Decimal('15.00'))
  "test_data_row_variable": |-
    product2
- "code": |-
    product3 = Product(name="Thingamajig", unit_price=Decimal('10.00'))
  "test_data_row_variable": |-
    product3
- "code": |-
    product4 = Product(name="Doodad", unit_price=Decimal('12.00'))
  "test_data_row_variable": |-
    product4
"test_data_sqlite": |-
  INSERT INTO customer (name, credit_limit, balance) VALUES ('John Doe', 1000, 0);
  INSERT INTO customer (name, credit_limit, balance) VALUES ('Jane Smith', 1500, 0);
  INSERT INTO customer (name, credit_limit, balance) VALUES ('Alice Johnson', 750, 0);
  INSERT INTO customer (name, credit_limit, balance) VALUES ('Bob Brown', 1200, 0);

  INSERT INTO order (customer_id, date_shipped, amount_total, notes) VALUES (1, '2023-10-10', 0, 'Urgent Delivery');
  INSERT INTO order (customer_id, date_shipped, amount_total, notes) VALUES (2, NULL, 0, 'Gift Wrapped');
  INSERT INTO order (customer_id, date_shipped, amount_total, notes) VALUES (3, NULL, 0, 'Standard Shipping');
  INSERT INTO order (customer_id, date_shipped, amount_total, notes) VALUES (1, '2023-10-15', 0, 'Express');

  INSERT INTO item (order_id, quantity, unit_price, amount, product_id) VALUES (1, 3, 20.00, 0, 1);
  INSERT INTO item (order_id, quantity, unit_price, amount, product_id) VALUES (2, 5, 15.00, 0, 2);
  INSERT INTO item (order_id, quantity, unit_price, amount, product_id) VALUES (3, 2, 10.00, 0, 3);
  INSERT INTO item (order_id, quantity, unit_price, amount, product_id) VALUES (4, 4, 12.00, 0, 1);

  INSERT INTO product (name, unit_price) VALUES ('Widget', 20.00);
  INSERT INTO product (name, unit_price) VALUES ('Gadget', 15.00);
  INSERT INTO product (name, unit_price) VALUES ('Thingamajig', 10.00);
  INSERT INTO product (name, unit_price) VALUES ('Doodad', 12.00);
