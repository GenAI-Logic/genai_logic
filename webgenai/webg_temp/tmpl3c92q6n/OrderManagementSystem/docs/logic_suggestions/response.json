{
    "models": [
        {
            "classname": "Customer",
            "code": "class Customer(Base):\n    __tablename__ = 'customer'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String, unique=True)\n    balance = Column(DECIMAL)\n    credit_limit = Column(DECIMAL)",
            "description": "Represents a customer in the system with unique name, balance, and credit limit attributes.",
            "name": "Customer"
        },
        {
            "classname": "Order",
            "code": "class Order(Base):\n    __tablename__ = 'order'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    customer_id = Column(Integer, ForeignKey('customer.id'))\n    date_shipped = Column(Date)\n    amount_total = Column(DECIMAL)\n    notes = Column(String)",
            "description": "Represents an order made by a customer, including a notes field.",
            "name": "Order"
        },
        {
            "classname": "Item",
            "code": "class Item(Base):\n    __tablename__ = 'item'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    order_id = Column(Integer, ForeignKey('order.id'))\n    product_id = Column(Integer, ForeignKey('product.id'))\n    quantity = Column(Integer, nullable=False)\n    unit_price = Column(DECIMAL)\n    amount = Column(DECIMAL)",
            "description": "Represents an item in an order, including quantity and pricing details.",
            "name": "Item"
        },
        {
            "classname": "Product",
            "code": "class Product(Base):\n    __tablename__ = 'product'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    unit_price = Column(DECIMAL)",
            "description": "Represents a product available in the system with a unit price.",
            "name": "Product"
        }
    ],
    "rules": [
        {
            "name": "Customer Name Constraint",
            "description": "Ensures that the customer's name cannot be 'y'.",
            "use_case": "Customer.name != 'y'",
            "entity": "Customer",
            "code": "Rule.constraint(validate=Customer,\n                as_condition=lambda row: row.name != 'y',\n                error_msg=\"Customer name cannot be 'y'\")"
        }
    ],
    "test_data": "",
    "test_data_rows": [],
    "test_data_sqlite": "",
    "name": "OrderManagementSystem"
}